# Reference(s)
# - https://mitchellh.com/writing/nix-with-dockerfiles
#
# Context / Motivation
# - I do NOT want to build a Docker image in Nix (unless I need hermetic builds).
#     - It's the wrong interface, generally speaking.
# - I got tired of pinning dependencies in two places in different ways
FROM nixos/nix:latest AS base

RUN echo "experimental-features = nix-command flakes" >> /etc/nix/nix.conf

# Copy all nix files into the image
COPY flake.nix flake.lock /src/

WORKDIR /src

# Fetch CI dependencies
# These are deliberately each independent layers so that when ONE changes, we dont
# rebuild all
#
# To identify/debug the correct source path, run `nix build .#<pkg>` outside of the dockerfile
RUN nix build .#just  && cp -v result/bin/just /usr/bin/just
RUN nix build .#rustc && cp -v result/bin/rustc /usr/bin/rustc
RUN nix build .#cargo && cp -v result/bin/cargo /usr/bin/cargo
RUN nix build .#clippy && cp -v result/bin/cargo-clippy /usr/bin/cargo-clippy && cp -v result/bin/clippy-driver /usr/bin/clippy-driver
RUN nix build .#rustfmt && cp -v result/bin/rustfmt /usr/bin/rustfmt
RUN nix build .#jdk23_headless && cp -v result/bin/java /usr/bin/java
RUN nix build .#gnuplot && cp -v result/bin/gnuplot /usr/bin/gnuplot
RUN nix build .#git && cp -v result/bin/git /usr/bin/git

FROM lukemathwalker/cargo-chef:0.1.67-rust-1.80-alpine3.20 as chef
WORKDIR /usr/src/app

FROM chef as planner
COPY . .
# Compute a lock-like file for our project
RUN cargo chef prepare --recipe-path recipe.json

FROM chef as builder
WORKDIR /usr/src/app
COPY --from=planner /usr/src/app/recipe.json recipe.json
# Build our project dependencies, not our application!
RUN cargo chef cook --release --recipe-path recipe.json

FROM ubuntu:latest
# Motivation for having a final image?
# - Running `nix develop` in CI takes too long (>2min)
#   - Dependencies can be baked into the image
# - `nix develop` prevents commands from being run in parallel

RUN apt-get update && apt-get install -y openssl ca-certificates gcc

# for dynamically linked things
COPY --from=base /nix/store /nix/store/
COPY --from=base /usr/bin/* /usr/bin

# TODO(FUTURE): These are tools that only CI needs. Maybe we include them in the Nix flake also.
# I'm burning too much time on this side quest now though.
# RUN apk add --no-cache --update coreutils gcc musl-dev bash git openssh
